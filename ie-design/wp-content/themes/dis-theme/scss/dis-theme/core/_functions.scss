@mixin border-radius($topleft, $topright, $bottomright, $bottomleft) {
    -webkit-border-top-left-radius: $topleft;
    -webkit-border-top-right-radius: $topright;
    -webkit-border-bottom-right-radius: $bottomright;
    -webkit-border-bottom-left-radius: $bottomleft;
    
    -moz-border-radius-topleft: $topleft;
    -moz-border-radius-topright: $topright;
    -moz-border-radius-bottomright: $bottomright;
    -moz-border-radius-bottomleft: $bottomleft;
    
    border-top-left-radius: $topleft;
    border-top-right-radius: $topright;
    border-bottom-right-radius: $bottomright;
    border-bottom-left-radius: $bottomleft;
}

@mixin clear-inputs(){
    -webkit-box-shadow: none;
    box-shadow: none;
    -webkit-transition: none;
    -o-transition: none;
    transition: none;
}

@mixin opacity($val){
	-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($val*100) + ")";
	filter: "alpha(opacity=" + ($val*100) + ")";
	-moz-opacity:$val;
	-khtml-opacity: $val;
	opacity: $val;
}

@mixin transparent($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: transparent;
  background-color: $rgba;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
  zoom: 1;
}


//////////////////////////
// RESPONSIVE SHORTCUTS //
//////////////////////////

//Specific device screen size:
// @include screen("xs"){ /* Any valid CSS declaration... */ } 
// @include screen("!xs"){ /* Bigger devices then XS size */ } 
// @include screen("xs"){} 
// @include screen("sm"){} 
// @include screen("md"){} 
// @include screen("lg"){} 

//Multiple custom device screen size (no apostrophe)
// @include screens(xs sm lg){} 

//Between 2 custom size
// @include screenbtw( @screen-xs-max, @screen-md-max ){} 
// @include screenbtw( "678px", "823px" ){} 

@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow:inset $top $left $blur $size $color;
        -moz-box-shadow:inset $top $left $blur $size $color;
        box-shadow:inset $top $left $blur $size $color;
    } @else {
        -webkit-box-shadow: $top $left $blur $size $color;
        -moz-box-shadow: $top $left $blur $size $color;
        box-shadow: $top $left $blur $size $color;
    }
    }
@mixin screen($size)
{
    @if $size == "xxs" 
    {
        @media (max-width: $screen-xxs-max)
        {
            @content;
        }
    }
    @else if $size == "xs" 
    {
        @media (max-width: $screen-xs-max)
        {
            @content;
        }
    }
    @else if $size == "!xs"
    {
        @media (min-width: $screen-sm-min) {  
            @content;
        }
    }
    @else if $size == "sm"
    {
        @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {  
            @content;
        }
    }
    @else if $size == "md"
    {
        @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {  
            @content;
        }
    }
    @else if $size == "lg"
    {
        @media (min-width: $screen-lg-min) {  
            @content;
        }
    }
}

@mixin screens($sizes)
{
    @each $size in $sizes {
        @if $size == xxs
        {
            @media (max-width: $screen-xxs-max)
            {
                @content;
            }
        }
        @else if $size == xs
        {
            @media (max-width: $screen-xs-max) {  
                @content;
            }
        }
        @else if $size == sm
        {
            @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {  
                @content;
            }
        }
        @else if $size == md
        {
            @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {  
                @content;
            }
        }
        @else if $size == lg
        {
            @media (min-width: $screen-lg-min) {  
                @content;
            }
        }
    }
}

@mixin screenbtw($min, $max)
{
    @media (min-width: $min) and (max-width: $max) 
    {
        @content;
    }
}